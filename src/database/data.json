[
  {
    "title": "Comparing Prisma and Mongoose",
    "description": "I've been using mongoose with MongoDB for most of my projects for over 4-years now because of its structure, and documentation, and also because I lovesome JSON data, lol! Recently, while keeping up with my knowledge of several technologies, I decided to build a mini-project using React as my front-end framework and using GraphQLs Apollo to design my API for the app.I used SQLite as my database (great database by the way, especially for embedded systems) and then Prisma to interact with my database. This article is about my personal understanding of the similarities and differences between Mongoose and Prisma and when you could consider using one over the other especially when you want to work with MongoDBWhat are Prisma and Mongoose?Prisma is an Object Relational Model (ORM) while Mongoose is an Object Data Model (ODM) meant for a MongoDB database. Both object-oriented libraries are used to create structured queries to interact with your database. They are a great way to save time building complex queries that interact with a database, especially sequel queries (SQL) for Prisma and as mentioned earlier, MongoDB for mongoose.Imagine building your backend and writing long SQL Statements such as “Select * from users WHERE role = shopper AND blah blah …. to fetch data from your database. I consider this way too long and could make your API/backend more complex than it should be. Using ORMs like Prisma helps structure these queries in a simplified manner using an object-oriented approach and helps make a developers life easier.Moving forward, Ill outline and explain what I noticed when building my latest project using Prisma and compare it with my experience using MongoDBs mongoose.",
    "imageURL": "https://images.unsplash.com/photo-1517319725296-466c84bd7d54?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
  },
  {
    "title": "CSS Container Queries",
    "description": "Container queries are often considered a modern approach to responsive web design where traditional media queries have long been the gold standard — the reason being that we can create layouts made with elements that respond to, say, the width of their containers rather than the width of the viewport.Why care about CSS Container Queries? When using a container query, we give elements the ability to change based on their container’s size, not the viewport. They allow us to define all of the styles for a particular element in a more predictable way.They are more reusable than media queries in that they behave the same no matter where they are used. So, if you were to create a component that includes a container query, you could easily drop it into another project and it will still behave in the same predictable fashion. They introduce new types of CSS length units that can be used to size elements by their container’s size.",
    "imageURL": "https://images.unsplash.com/photo-1494961104209-3c223057bd26?q=80&w=2002&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
  },
  {
    "title": "ES15 Enhancement",
    "description": "JavaScript continues to evolve, and the latest version, ECMAScript 2024 (ES15), brings a host of new features and enhancements. These updates aim to improve the language’s functionality, performance, and developer experience. In this article, we’ll explore the top five enhancements in ES15, complete with code samples to illustrate their practical applications.",
    "imageURL": "https://plus.unsplash.com/premium_photo-1676914336086-48914fc92824?q=80&w=1984&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
  }
]